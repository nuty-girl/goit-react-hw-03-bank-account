{"version":3,"sources":["App.module.css","Components/Controls/Controls.module.css","Components/Balance/Balance.module.css","Components/TransactionHistory/TransactionHistory.module.css","Components/Controls/Controls.js","Components/Balance/Balance.js","Components/TransactionHistory/TransactionHistory.js","Components/Dashboard/Dashboard.js","App.js","index.js"],"names":["module","exports","Controls","state","inputValue","getInputValue","e","amount","Number","currentTarget","value","setState","handleDeposit","props","onDeposit","reset","handleWithdraw","onWithdraw","this","className","styles","controls","type","name","onChange","onClick","Component","defaultProps","Balance","balance","income","expenses","TransactionHistory","items","history","map","item","key","id","date","Dashboard","transactions","initialTransactions","notifyErrorAmount","toast","notifyErrorFunds","notifyNegativeNumber","countFunds","reduce","acc","transaction","deposit","withdraw","hendlerDeposit","shortid","generate","Date","toLocaleString","hendlerWithdraw","persistedTransactions","localStorage","getItem","persistedBalance","JSON","parse","prevProps","prevState","setItem","stringify","funds","dashboard","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24d5caf8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3J_wn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__ODBTj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__1AKWS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__EtUXu\"};","import React, { Component } from 'react';\r\nimport T from 'prop-types';\r\nimport styles from './Controls.module.css';\r\n\r\nexport default class Controls extends Component {\r\n  static propTypes = {\r\n    onDeposit: T.func.isRequired,\r\n    onWithdraw: T.func.isRequired,\r\n  };\r\n\r\n  static defaultProps = {};\r\n\r\n  state = {\r\n    inputValue: '',\r\n  };\r\n\r\n  getInputValue = e => {\r\n    const amount = Number(e.currentTarget.value);\r\n    this.setState({\r\n      inputValue: amount,\r\n    });\r\n  };\r\n\r\n  handleDeposit = () => {\r\n    this.props.onDeposit(this.state.inputValue);\r\n    this.reset();\r\n  };\r\n\r\n  handleWithdraw = () => {\r\n    this.props.onWithdraw(this.state.inputValue);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      inputValue: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { inputValue } = this.state;\r\n    return (\r\n      <section className={styles.controls}>\r\n        <input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          value={inputValue}\r\n          onChange={this.getInputValue}\r\n        />\r\n        <button type=\"button\" onClick={this.handleDeposit}>\r\n          Deposit\r\n        </button>\r\n        <button type=\"button\" onClick={this.handleWithdraw}>\r\n          Withdraw\r\n        </button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport styles from './Balance.module.css';\r\n\r\nconst Balance = ({ balance, income, expenses }) => (\r\n  <section className={styles.balance}>\r\n    <span>{income}$</span>\r\n    <span>{expenses}$</span>\r\n    <span>Balance:{balance}$</span>\r\n  </section>\r\n);\r\n\r\nBalance.propTypes = {\r\n  balance: T.number.isRequired,\r\n  income: T.number,\r\n  expenses: T.number,\r\n};\r\nBalance.defaultProps = {\r\n  income: 0,\r\n  expenses: 0,\r\n};\r\nexport default Balance;\r\n","import React from 'react';\r\nimport T from 'prop-types';\r\nimport styles from './TransactionHistory.module.css';\r\n\r\nconst TransactionHistory = ({ items }) => (\r\n  <table className={styles.history}>\r\n    <thead>\r\n      <tr>\r\n        <th>Transaction</th>\r\n        <th>Amount</th>\r\n        <th>Date</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {items.map(item => (\r\n        <tr key={item.id}>\r\n          <td>{item.type}</td>\r\n          <td>{item.amount}$</td>\r\n          <td>{item.date}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nTransactionHistory.propTypes = {\r\n  items: T.arrayOf(\r\n    T.shape({\r\n      id: T.string.isRequired,\r\n      type: T.string.isRequired,\r\n      amount: T.number.isRequired,\r\n      date: T.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n\r\nexport default TransactionHistory;\r\n","import React, { Component } from 'react';\r\nimport T from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport styles from './Dashboard.module.css';\r\nimport Controls from '../Controls/Controls';\r\nimport Balance from '../Balance/Balance';\r\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\r\n\r\nexport default class Dashboard extends Component {\r\n  static propTypes = {\r\n    initialTransactions: T.arrayOf(\r\n      T.shape({\r\n        id: T.string.isRequired,\r\n        type: T.string.isRequired,\r\n        amount: T.number.isRequired,\r\n        date: T.string.isRequired,\r\n      }).isRequired,\r\n    ),\r\n  };\r\n\r\n  static defaultProps = {\r\n    initialTransactions: [],\r\n  };\r\n\r\n  state = {\r\n    transactions: this.props.initialTransactions,\r\n    balance: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const persistedTransactions = localStorage.getItem('transactions');\r\n    const persistedBalance = localStorage.getItem('balance');\r\n\r\n    if (persistedTransactions) {\r\n      this.setState({ transactions: JSON.parse(persistedTransactions) });\r\n    }\r\n    if (persistedBalance) {\r\n      this.setState({ balance: JSON.parse(persistedBalance) });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { transactions, balance } = this.state;\r\n    if (prevState.transactions !== transactions) {\r\n      localStorage.setItem('transactions', JSON.stringify(transactions));\r\n    }\r\n    if (prevState.balance !== balance) {\r\n      localStorage.setItem('balance', JSON.stringify(balance));\r\n    }\r\n  }\r\n\r\n  notifyErrorAmount = () => toast('Введите сумму для проведения операции!');\r\n\r\n  notifyErrorFunds = () =>\r\n    toast('На счету недостаточно средств для проведения операции!');\r\n\r\n  notifyNegativeNumber = () => toast('Введите положительное число!');\r\n\r\n  countFunds = () => {\r\n    return this.state.transactions.reduce(\r\n      (acc, transaction) => {\r\n        return {\r\n          ...acc,\r\n          [transaction.type]: acc[transaction.type] + transaction.amount,\r\n        };\r\n      },\r\n      { deposit: 0, withdraw: 0 },\r\n    );\r\n  };\r\n\r\n  hendlerDeposit = amount => {\r\n    const transaction = {\r\n      id: shortid.generate(),\r\n      type: 'deposit',\r\n      amount: Number(amount),\r\n      date: new Date().toLocaleString(),\r\n    };\r\n    if (amount === 0 || '') {\r\n      this.notifyErrorAmount();\r\n    } else if (amount < 0) {\r\n      this.notifyNegativeNumber();\r\n    } else if (amount > 0) {\r\n      this.setState(({ transactions, balance }) => ({\r\n        transactions: [...transactions, transaction],\r\n        balance: Number(balance) + Number(amount),\r\n      }));\r\n      // this.setState(prevState => ({\r\n      //   balance: prevState.balance + amount,\r\n      // }));\r\n      // this.setState(state => ({\r\n      //   transactions: [...state.transactions, transaction],\r\n      // }));\r\n    }\r\n  };\r\n\r\n  hendlerWithdraw = amount => {\r\n    const transaction = {\r\n      id: shortid.generate(),\r\n      type: 'withdraw',\r\n      amount: Number(amount),\r\n      date: new Date().toLocaleString(),\r\n    };\r\n    if (amount > this.state.balance) {\r\n      this.notifyErrorFunds();\r\n    } else if (amount === 0 || '') {\r\n      this.notifyErrorAmount();\r\n    } else if (amount < 0) {\r\n      this.notifyNegativeNumber();\r\n    } else if (amount > 0 && amount <= this.state.balance) {\r\n      this.setState(({ transactions, balance }) => ({\r\n        transactions: [...transactions, transaction],\r\n        balance: balance - amount,\r\n      }));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { transactions, balance } = this.state;\r\n    const funds = this.countFunds();\r\n\r\n    return (\r\n      <div className={styles.dashboard}>\r\n        <Controls\r\n          onDeposit={this.hendlerDeposit}\r\n          onWithdraw={this.hendlerWithdraw}\r\n        />\r\n        <Balance\r\n          balance={balance}\r\n          income={funds.deposit}\r\n          expenses={funds.withdraw}\r\n        />\r\n        <TransactionHistory items={transactions} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport styles from './App.module.css';\r\nimport Dashboard from './Components/Dashboard/Dashboard';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className={styles.App}>\r\n      <ToastContainer />\r\n      <Dashboard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'normalize.css';\r\nimport './index.module.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}